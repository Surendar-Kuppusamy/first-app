{"version":3,"file":"Locker.js","sources":["Locker.js"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAGM;AACN;AACA;AACA;AACA;AACA;;;;;;;;0DAAS;AACT;AACA;AACA;AACA","sourcesContent":["import { Injectable, Inject } from '@angular/core';\nimport { LOCKER_DRIVER_TYPES } from './DriverTypes';\nimport { LockerConfig } from './LockerConfig';\nvar Locker = (function () {\n    function Locker(driverTypes, lockerConfig) {\n        this.driverTypes = driverTypes;\n        this.lockerConfig = lockerConfig;\n        this.setNamespace();\n        this.setSeparator();\n        this.setDriverFallback();\n    }\n    Locker.prototype.setNamespace = function (namespace) {\n        if (namespace === void 0) { namespace = this.lockerConfig.driverNamespace; }\n        this.namespace = namespace;\n    };\n    Locker.prototype.setSeparator = function (separator) {\n        if (separator === void 0) { separator = this.lockerConfig.namespaceSeparator; }\n        this.separator = separator;\n    };\n    Locker.prototype.setDriverFallback = function (driverFallback) {\n        if (driverFallback === void 0) { driverFallback = this.lockerConfig.driverFallback; }\n        this.driverFallback = driverFallback;\n    };\n    Locker.prototype.set = function (type, key, data, config) {\n        this._getDriver(type).set(this._makeKey(key), data, config);\n    };\n    Locker.prototype.get = function (type, key) {\n        return this._getDriver(type).get(this._makeKey(key));\n    };\n    Locker.prototype.has = function (type, key) {\n        return this._getDriver(type).has(this._makeKey(key));\n    };\n    Locker.prototype.remove = function (type, key) {\n        this._getDriver(type).remove(this._makeKey(key));\n    };\n    Locker.prototype.key = function (type, index) {\n        return this._decodeKey(this._getDriver(type).key(index));\n    };\n    Locker.prototype.clear = function (type) {\n        this._getDriver(type).clear();\n    };\n    Locker.prototype._makeKey = function (key) {\n        return this.namespace ? \"\" + this.namespace + this.separator + key : key;\n    };\n    Locker.prototype._decodeKey = function (key) {\n        if (this.namespace)\n            return key.slice(this.namespace.length + this.separator.length);\n        else\n            return key;\n    };\n    Locker.prototype._getDriver = function (type) {\n        var askedDriver = this._getDriverType(type);\n        if (askedDriver && askedDriver.storage.isSupported())\n            return askedDriver.storage;\n        else\n            return this._getFallbackDriverType().storage;\n    };\n    Locker.prototype._getDriverType = function (type) {\n        return this.driverTypes.find(function (driverType) { return driverType.type === type; });\n    };\n    Locker.prototype._getFallbackDriverType = function () {\n        var _this = this;\n        if (Array.isArray(this.driverFallback)) {\n            return this.driverFallback\n                .map(function (type) { return _this._getDriverType(type); })\n                .find(function (driverType) { return driverType.storage.isSupported(); }) || this._getDriverType(\"memory\" /* MEMORY */);\n        }\n        else if (this.driverFallback) {\n            var driverType = this._getDriverType(this.driverFallback);\n            return driverType.storage.isSupported() ? driverType : this._getDriverType(\"memory\" /* MEMORY */);\n        }\n        else {\n            return this._getDriverType(\"memory\" /* MEMORY */);\n        }\n    };\n    Locker.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    Locker.ctorParameters = function () { return [\n        { type: Array, decorators: [{ type: Inject, args: [LOCKER_DRIVER_TYPES,] },] },\n        { type: LockerConfig, },\n    ]; };\n    return Locker;\n}());\nexport { Locker };\n"]}